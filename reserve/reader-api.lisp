					;-*- mode: lisp; coding: cp1251;-*-
(defconstant +convert-data-types+
  '((APIENTRY . ":convention :stdcall")
    (ATOM . ":int16")
    (BOOL . ":int")
    (BOOLEAN . ":int8")
    (BYTE . ":uchar")
    (CALLBACK . ":pointer")
    (CCHAR . ":char")
    (CHAR . ":char")
    (COLORREF . ":int32")
    (DWORD . ":ulong")
    (DWORD_PTR . ":uint64")
    (DWORD32 . ":uint")
    (DWORD64 . ":uint64")
    (DWORDLONG . ":uint64")
    (FLOAT . ":float")
    (HACCEL . ":handle")
    (HALF_PTR . ":int")
    (HANDLE . ":handle")
    (HBITMAP . ":handle")
    (HBRUSH . ":handle")
    (HCOLORSPACE . ":handle")
    (HCONV . ":handle")
    (HCONVLIST . ":handle")
    (HCURSOR . ":handle")
    (HDC . ":handle")
    (HDDEDATA . ":handle")
    (HDESK . ":handle")
    (HDROP . ":handle")
    (HDWP . ":handle")
    (HENHMETAFILE . ":handle")
    (HFILE . ":int")
    (HFONT . ":handle")
    (HGDIOBJ . ":handle")
    (HGLOBAL . ":handle")
    (HHOOK . ":handle")
    (HICON . ":handle")
    (HINSTANCE . ":handle")
    (HKEY . ":handle")
    (HKL . ":handle")
    (HLOCAL . ":handle")
    (HMENU . ":handle")
    (HMETAFILE . ":handle")
    (HMODULE . ":handle")
    (HMONITOR . ":handle")
    (HPALETTE . ":handle")
    (HPEN . ":handle")
    (HRESULT . ":long")
    (HRGN . ":handle")
    (HRSRC . ":handle")
    (HSZ . ":handle")
    (HWND . ":handle")
    (INT . ":int")
    (INT_PTR . ":int64")
    (INT16 . ":short")
    (INT32 . ":int")
    (INT64 . ":int64")
    (INT8 . ":char")
    (LANGID . ":int16")
    (LCID . ":int32")
    (LCTYPE . ":int32")
    (LGRPID . ":int32")
    (LONG . ":long")
    (LONG_PTR . ":long")
    (LONG32 . ":int")
    (LONG64 . ":int64")
    (LONGLONG . ":int64")
    (LPARAM . ":long")
    (LPBOOL . "(:pointer :int)")
    (LPBOOL . "(:pointer :int)")
    (LPBYTE . "(:pointer :uchar)")
    (LPCOLORREF . "(:pointer :int32)")
    (LPCSTR . "(:string :encoding :ascii)")
    (LPCTSTR . "(:string :encoding :utf-16le)")
    (LPCVOID . "(:pointer :void)")
    (LPCWSTR ."(:string :encoding :utf-16le)")
    (LPDWORD . "(:pointer :int32)")
    (LPHANDLE . "(:pointer :handle)")
    (LPINT . "(:pointer :int)")
    (LPLONG . "(:pointer :long)")
    (LPSTR . "(:pointer :char)")
    (LPTSTR . "(:string :encoding :utf-16le)")
    (LPVOID . "(:pointer :void)")
    (LPWORD . "(:pointer :int16)")
    (LPWSTR . "(:string :encoding :utf-16le)")
    (LRESULT . ":int64")
    (PBOOL . "(:pointer :int)")
    (PBOOLEAN . "(:pointer :int8)")
    (PBYTE . "(:pointer :int8)")
    (PCHAR . "(:pointer :char)")
    (PCSTR . "(:string :encoding :ascii)")
    (PCTSTR . "(:string :encoding :utf-16le)")
    (PCWSTR . "(:string :encoding :utf-16le)")
    (PDWORD . "(:pointer :int32)")
    (PDWORD_PTR . "(:pointer :uint64)")
    (PDWORD32 . "(:pointer :uint)")
    (PDWORD64 . "(:pointer :uint64)")
    (PDWORDLONG . "(:pointer :uint64)")
    (PFLOAT . "(:pointer :float)")
    (PHALF_PTR . "(:pointer :int)")
    (PHANDLE . "(:pointer :handle)")
    (PHKEY . "(:pointer :handle)")
    (PINT . "(:pointer :int)")
    (PINT_PTR . "(:pointer :int64)")
    (PINT16 . "(:pointer :int16)")
    (PINT32 . "(:pointer :int32)")
    (PINT64 . "(:pointer :int64)")
    (PINT8 . "(:pointer :int8)")
    (PLCID . "(:pointer :ulong)")
    (PLONG . "(:pointer :long)")
    (PLONG_PTR . "(:pointer :int64)")
    (PLONG32 . "(:pointer :int)")
    (PLONG64 . "(:pointer :int64)")
    (PLONGLONG . "(:pointer :llong)")
    (POINTER_32 . ":pointer")
    (POINTER_64 . ":pointer")
    (POINTER_signed . ":pointer")
    (POINTER_UNsigned . ":pointer")
    (PSHORT . "(:pointer :short)")
    (PSIZE_T . "(:pointer :uint64)")
    (PSSIZE_T . "(:pointer :int64)")
    (PSTR . "(:pointer :char)")
    (PTBYTE . "(:pointer :wchar)")
    (PTCHAR . "(:pointer :wchar)")
    (PTSTR . "(:string :encoding :utf-16le)")
    (PUCHAR . "(:pointer :uchar)")
    (PUHALF_PTR . "(:pointer :uint)")
    (PUINT . "(:pointer :uint)")
    (PUINT_PTR . "(:pointer :uint64)")
    (PUINT16 . "(:pointer :uint16)")
    (PUINT32 . "(:pointer :uint32)")
    (PUINT64 . "(:pointer :uint64)")
    (PUINT8 . "(:pointer :uint8)")
    (PULONG . "(:pointer :ulong)")
    (PULONG_PTR . "(:pointer :uint64)")
    (PULONG32 . "(:pointer :uint)")
    (PULONG64 . "(:pointer :uint64)")
    (PULONGLONG . "(:pointer :ullong)")
    (PUNICODE_STRING . "(:pointer :unicode-string)")
    (PUSHORT . "(:pointer :ushort)")
    (PVOID . "(:string :void)")
    (PWCHAR . "(:pointer :wchar)")
    (PWORD . "(:pointer :int16)")
    (PWSTR . "(:string :encoding :utf-16le)")
    (QWORD . ":uint64")
    (SC_HANDLE . ":handle")
    (SC_LOCK . "(:pointer :void)")
    (SERVICE_STATUS_HANDLE . ":handle")
    (SHORT . ":short")
    (SIZE_T . ":uint64")
    (SSIZE_T . ":int64")
    (TBYTE . ":wchar")
    (TCHAR . ":wchar")
    (UCHAR . ":uchar")
    (UHALF_PTR . ":uint")
    (UINT . ":uint")
    (UINT_PTR . ":uint64")
    (UINT16 . ":ushort")
    (UINT32 . ":uint")
    (UINT64 . ":int64")
    (UINT8 . ":uchar")
    (ULONG . ":ulong")
    (ULONG_PTR . ":uint64")
    (ULONG32 . ":uint")
    (ULONG64 . ":uint64")
    (ULONGLONG . ":uint64")
    (USHORT . ":ushort")
    (USN . ":llong")
    (VOID . ":void")
    (WCHAR . ":wchar")
    (WINAPI . ":convention :stdcall")
    (WINSTA . ":handle")
    (WORD . ":ushort")
    (WPARAM . ":uint64"))
   "msdn data types => foreign data types")

(defun convert-clipboard-function (library-name &aux (p-list '()) clipboard i-stream c-stream name-list doc-string)
    (declare (optimize (safety 3) (space 3) (debug 3) (speed 1)))
    "convert MSDN function â cffi lisp form"
    (open-clipboard #x0)
    (if (or (zerop (is-clipboard-format-available +cf-text+))
	    (zerop (setq clipboard (get-clipboard-data +cf-text+)))
	    (null-pointer-p (setq clipboard (local-lock clipboard))))
	(error-message *debug-io*)
	(labels ((convert-case (prev-char i-stream &aux (cur-char (read-char i-stream nil)) (ap-char (char-downcase prev-char)) res-char (res-list '(nil nil))) 
		     (mapcar #'append (list (cond ((or (member cur-char '(#\space #\, #\return nil))
						       (char= #\- (caar (setq res-list (convert-case cur-char i-stream))))
						       (apply #'= (setq res-char
									(mapcar #'(lambda (in) (cdr (assoc (upper-case-p in) '((nil . 0) (t . 1)))))
										(list prev-char cur-char)))))
						   (list ap-char))
						  ((apply #'> res-char) (list #\- ap-char))
						  ((apply #'< res-char) (list ap-char #\-)))
					    (list prev-char))
			     res-list))
		 (translate-name (i-stream &aux auxi)
		     (if (char/= #\- (caar (rplacd (setq auxi (convert-case (read-char i-stream) i-stream))
						   (list (cadr auxi)))))
			 auxi
			 (rplaca auxi (cdar auxi))))
		 (read-doc-string (i-stream end-list &aux line first-sym)
		     (if (setq first-sym (assoc (read-from-string (setq line (read-line i-stream nil)) nil) end-list))
			 (if (cdr first-sym) (list (cons (cdr first-sym) line)) (read-doc-string i-stream end-list))
			 (append (if (member (elt line 0) '(#\- #\return)) '() (list (string-trim '(#\space #\return) line)))
				 (read-doc-string i-stream end-list))))
		 (read-parameter-list (i-stream &aux (i-char (read-char i-stream)))
		     (if (char= #\) i-char)
  			 '(#\))
			 (append (cond ((char= #\space i-char) '(#\" #\"))
				       ((char= #\, i-char) (read-line i-stream)'(#\" #\) #\( #\"))
				       ((char= #\return i-char)  '(#\" #\)))
				       (t (list i-char)))
				 (read-parameter-list i-stream))))
		 (read-parameter-doc (i-stream o-stream &optional end-list &aux (line (read-line i-stream nil)) first-sym)
		     (cond ((null line))
			   ((null (setq first-sym (read-from-string line nil))) (read-parameter-doc i-stream o-stream end-list))
			   ((eq 'return first-sym) (princ (format nil "~%=> ~a" (caar end-list)) o-stream) (read-parameter-doc i-stream o-stream))
			   ((setq first-sym (assoc first-sym end-list)) (princ (format nil "~%~a" (cdr first-sym)) o-stream) (read-parameter-doc i-stream o-stream (remove first-sym end-list)))
			   (t (princ (format nil "~%~a" (string-trim '(#\space #\return) line)) o-stream) (read-parameter-doc i-stream o-stream end-list)))))
	    (with-output-to-string (o-stream)
	      (mapc #'(lambda (in) (write-char in o-stream))
		    (append
		     '(#\( #\c #\f #\f #\i #\: #\d #\e #\f #\c #\f #\u #\n #\space #\()
		     (apply #'append (rplacd (setq name-list (translate-name (setq i-stream (make-string-input-stream (foreign-string-to-lisp clipboard)))))
					     (list (cons #\space (cadr name-list)))))
		     '(#\space #\: #\c #\o #\n #\v #\e #\n #\t #\i #\o #\n #\space #\: #\s #\t #\d #\c #\a #\l #\l #\space #\: #\l #\i #\b #\r #\a #\r #\y #\space #\")
		     (coerce library-name 'list)
		     '(#\. #\d #\l #\l #\" #\) #\newline)))
	      (read-line i-stream)
	      (write-line (car (setq name-list (car (last (setq doc-string (read-doc-string i-stream (cons '(syntax . nil) +convert-data-types+)))))))
			  o-stream)
	      (write-char #\" o-stream)
	      (mapcar #'(lambda (in)
			    (princ in o-stream))
		      (butlast doc-string))
	      (with-input-from-string (a-stream (cdr name-list) :start (1+ (position #\( (cdr name-list))))
		  (setq doc-string (mapcar #'(lambda (in) (remove "" in :test #'equal))
					  (read-from-string
					   (concatenate 'string
							(append '(#\( #\( #\") (read-parameter-list (setq c-stream (make-concatenated-stream a-stream i-stream))))))))
		  (close c-stream))
	      (setq name-list (cons name-list (mapcar #'(lambda (in)
							    (setq p-list (append p-list (list (last in 2))))
							    (cons (read-from-string (car in)) (cadr in)))
						      (mapcar #'(lambda (in)
								    (reverse (cons (or (cdr (assoc (read-from-string (car in))
												   +convert-data-types+))
										       ":c7d5")
										   (mapcar #'(lambda (in)
												 (concatenate 'string in))
											   (with-input-from-string (i-stream (cadr in)) 
											       (translate-name i-stream))))))
							      doc-string))))
	      (read-doc-string i-stream '((parameters . t)))
	      (read-parameter-doc i-stream o-stream name-list)
	      (mapcar #'(lambda (in) (princ (format nil "~s" in) o-stream))
		      (append))
	      (princ (format nil "~s~%(" #\") o-stream)
	      
	      (close i-stream)
	      (format *debug-io* "~s" (get-output-stream-string o-stream)))))
    (close-clipboard))
	
;;;(if (char/= #\- (caar (setq auxi (list (car auxi) (append '(#\") (cadr auxi) '(#\"))))))
;;;    auxi
;;;    (list (cdar auxi) (cadr auxi)))
